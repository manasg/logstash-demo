input { 
    stdin { 
        type => "stdin-type"
    }
    
    file {
        type => "log"
        path => "/HOST_DOC/logstash-demo/simple/input.log"
    }
}

filter {
    # separating grok filters - as we would like to do diff
    # things with fields/tags based on what matched
    # however alternative patterns can be specified within the
    # same grok block

    # this will cause grok parse failure tag to be added along with 
    # matched fields. See NOTES.txt

    grok {
        type => "log"
        patterns_dir => "/HOST_DOC/logstash-demo/simple/patterns"
        pattern => ["%{APPENGINE_REQ_LOG}", "%{APPENGINE_APP_LOG}"]
        named_captures_only => true
        add_tag => ['appengine_req_log']
    }

    # Tagging GAE App logs so the date is parsed differently
    grep {
        type => 'log'
        match => ['@message','^\t[0-9]:[0-9]+.*']
        drop => false
        add_tag => ['appengine_app_log']
        remove_tag => ['appengine_req_log']
    }

    # GAE Logs are always in PST - but after download the app log
    # just has seconds since EPOCH without TZ.
    
    date {
        type => "log"
        tags => ['appengine_app_log']
        match => ['app_log_timestamp', "UNIX"]
    }

    date {
        type => "log"
        tags => ['appengine_req_log']
        match => ['timestamp', "dd/MMM/YYYY:HH:mm:ss Z"]
    }

    grep {
        # drop events whose @message matches the regex
        # are grok patterns avail? NO
        type => "log"
        match => [ "@message", "^\t:\s"]
        drop => true
        negate => true
    }
}

output { 
    stdout { 
        debug => true 
        debug_format => "json"
    }

    elasticsearch {
        embedded => true
    }
}


